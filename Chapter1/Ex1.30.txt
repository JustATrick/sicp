Now, using this iterative sum, I can properly evaluate Simpson's Rule for n = 1000.

guile> (simpson cube 0.0 1.0 1000)
0.25

So far, so boring.

Just showing off a bit:

guile> (simpson cube 0.0 1.0 10000)
0.25
guile> (simpson cube 0.0 1.0 100000)
0.25
guile> (simpson cube 0.0 1.0 1000000)
0.249999999999998

Huh? n got bigger and the result got less accurate? Hmm, I guess the loss of
accuracy comes from insufficient precision to properly represent all the small
bits that must be added together. Let's think, we're working with cube, so the
smallest number we're using is of order h^3, which in that last case is 1e6^3
or 1e18. The previous version is 1e15. I believe epsilon for doubles sits at
around 1e15-1e16, so that makes sense.

As a check on this thinking, we'd expect there'd be no such problems if we
allow scheme to use rationals:

guile> (simpson cube 0 1 1000000)
1/4

So, looking good there.

I'd also expect that integrating x^4 would become less accurate as n = 1e4 or so (since n^4 would then approach epsilon).

guile> (simpson (lambda (x) (* x x x x)) 0.0 1.0 2)
0.208333333333333
guile> (simpson (lambda (x) (* x x x x)) 0.0 1.0 4)
0.200520833333333
guile> (simpson (lambda (x) (* x x x x)) 0.0 1.0 6)
0.200102880658436
guile> (simpson (lambda (x) (* x x x x)) 0.0 1.0 8)
0.200032552083333
guile> (simpson (lambda (x) (* x x x x)) 0.0 1.0 10)
0.200013333333333
guile> (simpson (lambda (x) (* x x x x)) 0.0 1.0 100)
0.200000001333333
guile> (simpson (lambda (x) (* x x x x)) 0.0 1.0 1000)
0.200000000000133
guile> (simpson (lambda (x) (* x x x x)) 0.0 1.0 10000)
0.2
guile> (simpson (lambda (x) (* x x x x)) 0.0 1.0 100000)
0.2
guile> (simpson (lambda (x) (* x x x x)) 0.0 1.0 1000000)
0.200000000000002

Hmm, problems don't show up until around 1e6 again, which is not
really compatible with my assumption. Unless, the errors cancel nicely
when n is even?

For x^5, I'd expect trouble near 1e3-ish

guile> (simpson (lambda (x) (* x x x x x)) 0.0 1.0 2)
0.1875
guile> (simpson (lambda (x) (* x x x x x)) 0.0 1.0 4)
0.16796875
guile> (simpson (lambda (x) (* x x x x x)) 0.0 1.0 5)
0.132544
guile> (simpson (lambda (x) (* x x x x x)) 0.0 1.0 6)
0.166923868312757
guile> (simpson (lambda (x) (* x x x x x)) 0.0 1.0 8)
0.166748046875
guile> (simpson (lambda (x) (* x x x x x)) 0.0 1.0 10)
0.1667
guile> (simpson (lambda (x) (* x x x x x)) 0.0 1.0 100)
0.16666667
guile> (simpson (lambda (x) (* x x x x x)) 0.0 1.0 1000)
0.166666666667
guile> (simpson (lambda (x) (* x x x x x)) 0.0 1.0 5000)
0.166666666666667
guile> (simpson (lambda (x) (* x x x x x)) 0.0 1.0 10000)
0.166666666666667
guile> (simpson (lambda (x) (* x x x x x)) 0.0 1.0 50000)
0.166666666666667
guile> (simpson (lambda (x) (* x x x x x)) 0.0 1.0 100000)
0.166666666666665

Hmm, no trouble until n = 1e5. I'm stumped...
